cmake_minimum_required(VERSION 2.8.3)
project(uml_to_ros)

## Compile as C++11, supported in ROS Kinetic and newer
# add_compile_options(-std=c++11)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages
find_package(catkin REQUIRED COMPONENTS
  roscpp
#  rospy
  std_msgs
  message_generation
)

## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)


## Uncomment this if the package has a setup.py. This macro ensures
## modules and global scripts declared therein get installed
## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html
# catkin_python_setup()

################################################
## Declare ROS messages, services and actions ##
################################################

## To declare and build messages, services or actions from within this
## package, follow these steps:
## * Let MSG_DEP_SET be the set of packages whose message types you use in
##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).
## * In the file package.xml:
##   * add a build_depend tag for "message_generation"
##   * add a build_depend and a exec_depend tag for each package in MSG_DEP_SET
##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in
##     but can be declared for certainty nonetheless:
##     * add a exec_depend tag for "message_runtime"
## * In this file (CMakeLists.txt):
##   * add "message_generation" and every package in MSG_DEP_SET to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * add "message_runtime" and every package in MSG_DEP_SET to
##     catkin_package(CATKIN_DEPENDS ...)
##   * uncomment the add_*_files sections below as needed
##     and list every .msg/.srv/.action file to be processed
##   * uncomment the generate_messages entry below
##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)

## Generate messages in the 'msg' folder
 add_message_files(
   FILES
   WristJoint_Wrist_MaxPosition.msg
   WristJoint_Wrist_MinPosition.msg
   WristJoint_Wrist_Position.msg

   ShoulderJoint_Shoulder_MaxPosition.msg
   ShoulderJoint_Shoulder_MinPosition.msg
   ShoulderJoint_Shoulder_Position.msg

   RotaryShoulderJoint_RotaryShoulder_MaxPosition.msg
   RotaryShoulderJoint_RotaryShoulder_MinPosition.msg
   RotaryShoulderJoint_RotaryShoulder_Position.msg

   ArmJoint_Arm_MaxPosition.msg
   ArmJoint_Arm_MinPosition.msg
   ArmJoint_Arm_Position.msg

   Gripper_Gripper__Open.msg

   RobotArmPosition_RobotArmPosition_ArmPosition.msg
   RobotArmPosition_RobotArmPosition_RotaryShoulderPosition.msg
   RobotArmPosition_RobotArmPosition_ShoulderPosition.msg
   RobotArmPosition_RobotArmPosition_WristPosition.msg

   ProductPart_ProductPart_ID.msg

   RFIDReader_RFIDReader_Value.msg

   AssemblyCellController_AssemblyCellController_ProductsCount.msg
)

## Generate services in the 'srv' folder
 add_service_files(
   FILES
   WristJoint_Wrist_move.srv 

   ShoulderJoint_Shoulder_move.srv

   RotaryShoulderJoint_RotaryShoulder_move.srv
   
   ArmJoint_Arm_move.srv 
   
   Gripper_Gripper_close.srv
   Gripper_Gripper_open.srv
   
   RobotArm_RobotArm_moveTo.srv
   RobotArm_RobotArm_openGripper.srv
   RobotArm_RobotArm_closeGripper.srv
   
   Conveyor_Conveyor_moveForward.srv
   Conveyor_Conveyor_moveBackward.srv
   Conveyor_Conveyor_stop.srv
   Conveyor_Conveyor_isItemDetected.srv
   Conveyor_Conveyor_getPosition.srv
   Conveyor_Conveyor_getItem.srv
   Conveyor_Conveyor_setItem.srv

   StorageCompartment_StorageCompartment_setProductParts.srv
   StorageCompartment_StorageCompartment_getProductParts.srv
   StorageCompartment_StorageCompartment_getActualLoad.srv

   StorageUnit_StorageUnit_getPosition.srv

   AssemblyCellController_AssemblyCellController_addProduct.srv
   AssemblyCellController_AssemblyCellController_getProductsToAssembly.srv      
   AssemblyCellController_AssemblyCellController_setProductsToAssembly.srv
)

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
generate_messages(
   DEPENDENCIES
   std_msgs
)

################################################
## Declare ROS dynamic reconfigure parameters ##
################################################

## To declare and build dynamic reconfigure parameters within this
## package, follow these steps:
## * In the file package.xml:
##   * add a build_depend and a exec_depend tag for "dynamic_reconfigure"
## * In this file (CMakeLists.txt):
##   * add "dynamic_reconfigure" to
##     find_package(catkin REQUIRED COMPONENTS ...)
##   * uncomment the "generate_dynamic_reconfigure_options" section below
##     and list every .cfg file to be processed

## Generate dynamic reconfigure parameters in the 'cfg' folder
# generate_dynamic_reconfigure_options(
#   cfg/DynReconf1.cfg
#   cfg/DynReconf2.cfg
# )

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if your package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
#  INCLUDE_DIRS include
#  LIBRARIES uml-to-ros
#  CATKIN_DEPENDS roscpp rospy std_msgs
#  DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
include_directories(
# include
  ${catkin_INCLUDE_DIRS}
)

## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/uml-to-ros.cpp
# )

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure
# add_dependencies(${PROJECT_NAME} ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
# add_executable(${PROJECT_NAME}_node src/uml-to-ros_node.cpp)

### ROS node 01
add_executable(wristjoint_node 
	src/WristJoint.cc 
	src/RobotArmJoint.cc
)
add_dependencies(wristjoint_node uml_to_ros_generate_messages_cpp)
target_link_libraries(wristjoint_node
   ${catkin_LIBRARIES}
)

### ROS node 02
add_executable(shoulderjoint_node 
	src/ShoulderJoint.cc 
	src/RobotArmJoint.cc
)
add_dependencies(shoulderjoint_node uml_to_ros_generate_messages_cpp)
target_link_libraries(shoulderjoint_node
   ${catkin_LIBRARIES}
)

### ROS node 03
add_executable(rotaryshoulderjoint_node 
	src/RotaryShoulderJoint.cc 
	src/RobotArmJoint.cc
)
add_dependencies(rotaryshoulderjoint_node uml_to_ros_generate_messages_cpp)
target_link_libraries(rotaryshoulderjoint_node
   ${catkin_LIBRARIES}
)

### ROS node 04
add_executable(armjoint_node 
	src/ArmJoint.cc 
	src/RobotArmJoint.cc
)
add_dependencies(armjoint_node uml_to_ros_generate_messages_cpp)
target_link_libraries(armjoint_node
   ${catkin_LIBRARIES}
)

### ROS node 05
add_executable(gripper_node 
	src/Gripper.cc 
)
add_dependencies(gripper_node uml_to_ros_generate_messages_cpp)
target_link_libraries(gripper_node
   ${catkin_LIBRARIES}
)

### ROS node 06
add_executable(robotarmposition_node 
        src/RobotArmPosition.cc
)
add_dependencies(robotarmposition_node uml_to_ros_generate_messages_cpp)
target_link_libraries(robotarmposition_node
   ${catkin_LIBRARIES}
)


### ROS node 07
add_executable(robotarm_node 
	src/RobotArm.cc 
)
add_dependencies(robotarm_node uml_to_ros_generate_messages_cpp)
target_link_libraries(robotarm_node
   ${catkin_LIBRARIES}
)

### ROS node 08
#add_executable(productpart_node 
#	src/ProductPart.cc
#        src/Item.cc 
#)
#add_dependencies(productpart_node uml_to_ros_generate_messages_cpp)
#target_link_libraries(productpart_node
#   ${catkin_LIBRARIES}
#)

### ROS node 09
add_executable(rfidreader_node 
	src/RFIDReader.cc
        src/ItemReader.cc 
)
add_dependencies(rfidreader_node uml_to_ros_generate_messages_cpp)
target_link_libraries(rfidreader_node
   ${catkin_LIBRARIES}
)

### ROS node 10
add_executable(conveyor_node 
	src/Conveyor.cc
        src/Item.cc
	src/ProductPart.cc
)
add_dependencies(conveyor_node uml_to_ros_generate_messages_cpp)
target_link_libraries(conveyor_node
   ${catkin_LIBRARIES}
)

### ROS node 11
add_executable(storagecompartment_node 
	src/StorageCompartment.cc
        src/Item.cc
	src/ProductPart.cc
)
add_dependencies(storagecompartment_node uml_to_ros_generate_messages_cpp)
target_link_libraries(storagecompartment_node
   ${catkin_LIBRARIES}
)

### ROS node 12
add_executable(storageunit_node 
	src/StorageUnit.cc
        src/Item.cc
	src/ProductPart.cc
)
add_dependencies(storageunit_node uml_to_ros_generate_messages_cpp)
target_link_libraries(storageunit_node
   ${catkin_LIBRARIES}
)

### ROS node 13
add_executable(assemblycellcontrolle_node 
	src/AssemblyCellController.cc
        src/Item.cc
	src/ProductPart.cc
	src/Product.cc
	src/Recipe.cc
)
add_dependencies(assemblycellcontrolle_node uml_to_ros_generate_messages_cpp)
target_link_libraries(assemblycellcontrolle_node
   ${catkin_LIBRARIES}
)


## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})



## Specify libraries to link a library or executable target against
#target_link_libraries(wristjoint_node
#   ${catkin_LIBRARIES}
#)




#############
## Install ##
#############

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# catkin_install_python(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_executables.html
# install(TARGETS ${PROJECT_NAME}_node
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark libraries for installation
## See http://docs.ros.org/melodic/api/catkin/html/howto/format1/building_libraries.html
# install(TARGETS ${PROJECT_NAME}
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_GLOBAL_BIN_DESTINATION}
# )

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )

#############
## Testing ##
#############

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_uml-to-ros.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)
